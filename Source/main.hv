
PointType := class
{
	pos := vec2f
}

main := !(char^[] args) -> int
{
	x := 500
	y := 500

	win := new Window
	win.Init(x,y,"Pixels",true)
	
	VulkanInit(win)

	vInstance := vk

	vk.CreateSwapchain(x,y)

	shadersDB := VulkanShaderLoader

	cacheFile := new CacheFile("EngineData.zip")
	shadersDB.SetCacheFile(cacheFile)

	renderPass := vk.CreateRenderPass(![
			TRenderPassFrame(vk.SwapImageFormat,	VK_IMAGE_LAYOUT_UNDEFINED,VK_IMAGE_LAYOUT_PRESENT_SRC_KHR)
		],false)
	

	pointsCount := 1024

	vk.initCreateStageMemory()

	vertData := vk.CreateMemBuffer(pointsCount*PointType->TypeSize,"vcr")


	{
		verts := Vector.{PointType}
		verts.Resize(pointsCount)

		for it : verts
		{
			it.pos.x = RandInt(0..100) / 100 - 0.5
			it.pos.y = RandInt(0..100) / 100 - 0.5
			it.pos *= vec2f(2.0,2.0)
		}
		vertData.TransferData(verts)
	}

	layout := renderPass.CreateLayout(![
			VKType(VType_Float,2)
	],![],![],1)


	shadersDB.SetInput("light",layout)

	mainShader := shadersDB.LoadShader("Shaders/test.json")


	zeroPass := vk.CreateRenderPass(![],false)
	computeLayout := zeroPass.CreateLayout(![
			VKType(VType_Float,2)
	],![],![],1)


	compShader := shadersDB.LoadComputeShader(vk,computeLayout,"Shaders/bap.comp")

	cmds := TVkCommandBuffer(vk,vk.itDrawCmdPool2)

	while not win.ShouldClose()
	{

		surfaceIndex := u32
		drawRes := false
		@work vk.DrawGetImage(surfaceIndex&,drawRes&)

		cmds.Reset()
		cmds.Start()

		{
			bar1 := VkImageMemoryBarrier()
			bar1.image = vk.surfaceImages^[surfaceIndex]
			bar1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
			bar1.newLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
			bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
			bar1.subresourceRange.levelCount = 1
			bar1.subresourceRange.layerCount = 1
			vk.Funcs.vkCmdPipelineBarrier(cmds.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
		}


		clrAtt := VkRenderingAttachmentInfo[1]

		clrValues := float[10]
		
		clrValues[0] = 1.0
		clrValues[1] = 0.5
		clrValues[2] = 0.0 
		clrValues[3] = 1.0 
		clrValues[4] = 0.5 

		{
			atm := ref clrAtt[0]
			atm."this"()
			atm.imageView = vk.surfaceImageViews^[surfaceIndex]
			atm.imageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
			atm.resolveMode = VK_RESOLVE_MODE_NONE //TODO
			//atm.loadOp = VK_ATTACHMENT_LOAD_OP_LOAD
			atm.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR
			atm.storeOp = VK_ATTACHMENT_STORE_OP_STORE
			memcpy(atm.clearValue&,clrValues[0]&,4*4)
		}

		rndr := VkRenderingInfo()
		rndr.renderArea.extent.width = vk.GetSurfaceWidth() //surfAb.currentExtent.width
		rndr.renderArea.extent.height = vk.GetSurfaceHeight() //surfAb.currentExtent.height
		rndr.layerCount = 1
		rndr.colorAttachmentCount = 1
		rndr.pColorAttachments&->{void^^}^ = clrAtt[0]&

		vk.Funcs.vkCmdBeginRendering(cmds.Get(),rndr&)
		mainShader.ApplyShaderToQueue(vk,cmds.Get(),x,y)
		offsets := VkDeviceSize
		vk.Funcs.vkCmdBindVertexBuffers(cmds.Get(),0,1,vertData.GetBufferPointer(),offsets&)
		vk.Funcs.vkCmdDraw(cmds.Get(),pointsCount,1,0,0)
		vk.Funcs.vkCmdEndRendering(cmds.Get())

		{
			bar1 := VkImageMemoryBarrier()
			bar1.image = vk.surfaceImages^[surfaceIndex]
			bar1.oldLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
			bar1.newLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
			bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
			bar1.subresourceRange.levelCount = 1
			bar1.subresourceRange.layerCount = 1
			vk.Funcs.vkCmdPipelineBarrier(cmds.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
		}
		cmds.Stop()
		cmds.Submit(vk.DrawQueue,null)
		vk.Funcs.vkQueueWaitIdle(vk.DrawQueue)

		vk.DrawPresentImage(surfaceIndex)

		win.PollEvents()
	}
	return 0
}
